import { autoCreateSettings, defaultSettings, getSetting, setSetting, settingsPath } from "./utils/settings";
import Hyprland from "gi://AstalHyprland";
const hyprland = Hyprland.get_default();
import { WidgetSelectors } from "./widgets/rightPanel/RightPanel";
import { refreshCss } from "./utils/scss";
import { bind, GLib, Variable } from "astal";
import { writeJSONFile } from "./utils/json";
export const NOTIFICATION_DELAY = 5000;
// Settings are stored in a json file, containing all the settings, check if it exists, if not, create it
export const globalSettings = Variable(defaultSettings);
autoCreateSettings();
globalSettings.subscribe((value) => writeJSONFile(settingsPath, value));
export const globalOpacity = Variable(getSetting("globalOpacity"));
globalOpacity.subscribe((value) => {
    setSetting("globalOpacity", value);
    refreshCss();
});
export const globalIconSize = Variable(getSetting("globalIconSize"));
globalIconSize.subscribe((value) => {
    setSetting("globalIconSize", value);
    refreshCss();
});
export const globalMargin = 14;
export const globalTransition = 500;
export const date_less = Variable("").poll(1000, () => GLib.DateTime.new_now_local().format("%H:%M"));
export const date_more = Variable("").poll(1000, () => GLib.DateTime.new_now_local().format(":%S %b %e, %A."));
export const barVisibility = Variable(getSetting("bar.visibility"));
barVisibility.subscribe((value) => setSetting("bar.visibility", value));
export const barLock = Variable(getSetting("bar.lock"));
barLock.subscribe((value) => setSetting("bar.lock", value));
export const barOrientation = Variable(getSetting("bar.orientation"));
barOrientation.subscribe((value) => setSetting("bar.orientation", value));
export const waifuApi = Variable(getSetting("waifu.api"));
waifuApi.subscribe((value) => setSetting("waifu.api", value));
export const waifuCurrent = Variable(getSetting("waifu.current"));
waifuCurrent.subscribe((value) => setSetting("waifu.current", value));
export const waifuFavorites = Variable(getSetting("waifu.favorites"));
waifuFavorites.subscribe((value) => setSetting("waifu.favorites", value));
export const focusedClient = bind(hyprland, "focusedClient");
export const emptyWorkspace = focusedClient.as((client) => !client);
export const focusedWorkspace = bind(hyprland, "focusedWorkspace");
export const newAppWorkspace = Variable(0);
export const rightPanelVisibility = Variable(getSetting("rightPanel.visibility"));
rightPanelVisibility.subscribe((value) => setSetting("rightPanel.visibility", value));
export const rightPanelExclusivity = Variable(getSetting("rightPanel.exclusivity"));
rightPanelExclusivity.subscribe((value) => setSetting("rightPanel.exclusivity", value));
export const rightPanelWidth = Variable(getSetting("rightPanel.width"));
rightPanelWidth.subscribe((value) => setSetting("rightPanel.width", value));
export const rightPanelLock = Variable(getSetting("rightPanel.lock"));
rightPanelLock.subscribe((value) => setSetting("rightPanel.lock", value));
export const DND = Variable(getSetting("notifications.dnd"));
DND.subscribe((value) => setSetting("notifications.dnd", value));
export const widgetLimit = 5;
export const Widgets = Variable(getSetting("rightPanel.widgets")
    .map((name) => WidgetSelectors.find(widget => widget.name === name)));
Widgets.subscribe((value) => setSetting("rightPanel.widgets", value.map(widget => widget.name)));
export const leftPanelVisibility = Variable(getSetting("leftPanel.visibility"));
leftPanelVisibility.subscribe((value) => setSetting("leftPanel.visibility", value));
export const leftPanelExclusivity = Variable(getSetting("leftPanel.exclusivity"));
leftPanelExclusivity.subscribe((value) => setSetting("leftPanel.exclusivity", value));
export const leftPanelWidth = Variable(getSetting("leftPanel.width"));
leftPanelWidth.subscribe((value) => setSetting("leftPanel.width", value));
export const leftPanelLock = Variable(getSetting("leftPanel.lock"));
leftPanelLock.subscribe((value) => setSetting("leftPanel.lock", value));
