// Shader généré automatiquement depuis Wallust
#define time iTime*0.2

mat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}
mat2 m2 = mat2( 0.80,  0.60, -0.60,  0.80 );

float fbm( in vec2 p ) {
    float z=2.;
    float rz = 0.;
    for (float i= 1.;i < 7.;i++ ) {
        rz+= 1.0/z;
        z = z*2.;
        p = p*2.;
        p*= m2;
    }
    return rz;
}

// Couleurs dynamiques Wallust (extraites du fond d'écran)
vec3 col1 = vec3({{colors.vec3.0}});
vec3 col2 = vec3({{colors.vec3.1}});
vec3 col3 = vec3({{colors.vec3.2}});
vec3 col4 = vec3({{colors.vec3.3}});

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 p = fragCoord.xy / iResolution.xy*2.-1.;
    p.x *= iResolution.x/iResolution.y;
    vec2 bp = p;

    p += 5.;
    p *= 0.6;

    float rb = fbm(p*.5+time*.17)*.1;
    rb = sqrt(rb);
    p *= makem2(rb*.2+atan(p.y,p.x)*1.);

    float rz = fbm(p*.9-time*.7);
    rz *= dot(bp*5.,bp)+.5;
    rz *= sin(p.x*.5+time*4.)*1.5;

    vec3 col = mix(col1, col2, sin(time)*0.5+0.5);
    col = mix(col, col3, 0.3 + 0.2 * sin(time*2.));
    fragColor = vec4(sqrt(abs(col)) * (rz + 0.1), 1.0);
}
