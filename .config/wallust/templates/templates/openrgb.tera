// Shader g√©n√©r√© automatiquement depuis Wallust üé®

#define time iTime*0.2

mat2 makem2(in float theta){
    float c = cos(theta);
    float s = sin(theta);
    return mat2(c,-s,s,c);
}
mat2 m2 = mat2( 0.80,  0.60, -0.60,  0.80 );

// Couleurs dynamiques Wallust
{% set c0 = colors.vec3[0] %}
{% set c1 = colors.vec3[1] %}
{% set c2 = colors.vec3[2] %}
{% set c3 = colors.vec3[3] %}
{% set c4 = colors.vec3[4] %}
{% set c5 = colors.vec3[5] %}

vec3 col1 = vec3({{c0[0]}}, {{c0[1]}}, {{c0[2]}});
vec3 col2 = vec3({{c1[0]}}, {{c1[1]}}, {{c1[2]}});
vec3 col3 = vec3({{c2[0]}}, {{c2[1]}}, {{c2[2]}});
vec3 col4 = vec3({{c3[0]}}, {{c3[1]}}, {{c3[2]}});
vec3 col5 = vec3({{c4[0]}}, {{c4[1]}}, {{c4[2]}});
vec3 col6 = vec3({{c5[0]}}, {{c5[1]}}, {{c5[2]}});

float fbm( in vec2 p ) {
    float z = 2.0;
    float rz = 0.0;
    for (float i = 1.0; i < 7.0; i++) {
        rz += 1.0 / z;
        z *= 2.0;
        p *= 2.0;
        p *= m2;
    }
    return rz;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 p = fragCoord.xy / iResolution.xy * 2.0 - 1.0;
    p.x *= iResolution.x / iResolution.y;
    vec2 bp = p;

    p += 5.0;
    p *= 0.6;

    float rb = fbm(p * 0.5 + time * 0.17) * 0.1;
    rb = sqrt(rb);
    p *= makem2(rb * 0.2 + atan(p.y, p.x) * 1.0);

    float rz = fbm(p * 0.9 - time * 0.7);
    rz *= dot(bp * 5.0, bp) + 0.5;
    rz *= sin(p.x * 0.5 + time * 4.0) * 1.5;

    // Cycle d‚Äôeffets : couleur statique ‚Üí pluie ‚Üí vague ‚Üí etc.
    vec3 base     = mix(col1, col2, smoothstep(0.0, 1.0, sin(time)));
    vec3 rain     = mix(col3, col4, smoothstep(0.0, 1.0, fract(time)));
    vec3 wave     = mix(col5, col6, 0.5 + 0.5 * sin(time * 2.0));
    vec3 inter1   = mix(base, rain, 0.5 + 0.5 * sin(time * 0.5));
    vec3 finalCol = mix(inter1, wave, 0.4 + 0.4 * sin(time * 0.8));

    fragColor = vec4(sqrt(abs(finalCol)) * (rz + 0.1), 1.0);
}
